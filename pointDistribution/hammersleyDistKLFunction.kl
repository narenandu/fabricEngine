/*
    p1              In   Integer
    numPoints       In   Integer
    mesh            In   PolygonMesh
    pointPositions  Out  Vec3[]
*/

operator calcPositions<<<index>>>(io Vec3 pointPositions[], Scalar p1, PolygonMesh mesh, Integer numPoints) {
    Scalar p, x, y, inverseP;
    Integer i, a;
    
    // Get the Mesh Length, Width, BboxMin and BBoxMax
    Vec3 bBoxMax = mesh.getBoundingVolume().bBoxGetMax();
    Vec3 bBoxMin = mesh.getBoundingVolume().bBoxGetMin();
    Scalar bBoxLen = bBoxMax.x - bBoxMin.x;
    Scalar bBoxWid = bBoxMax.z - bBoxMin.z;  
    
    x = 0;
    inverseP = 1.0/p1;
    // calculating the hammersley Seq
    for (p=inverseP, i=index ; i ; p*=inverseP, i*=inverseP)
       if (a = i % p1) 
           x += a * p;
    // map it to the plane dimensions in x
    x = bBoxMin.x + bBoxLen * x ;
   
    y = (index + inverseP) / numPoints;
   // map it to the plane dimensions in y
    y = bBoxMin.z + bBoxWid * y;

    // populate the x, y
    pointPositions[index] = Vec3(x, 0, y);
}

dfgEntry {
    //sanity Checks
    if (numPoints <= 0
        || mesh == null
        || p1 <= 0)
      {
        pointPositions.resize(0);
        return;
      }
      
    pointPositions.resize(numPoints);
    calcPositions<<<numPoints>>>(pointPositions, p1, mesh, numPoints);
}
